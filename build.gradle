plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

class SemverTask extends DefaultTask {
	static String baseVersion;

	@TaskAction
	def execute() {
		println("::set-output name=value::" + project.version);
		println("::set-output name=v_value::v" + project.version);
	}
	
	static def calculateVersion(Project project) {
		try {
			String lastTag = getTag(project);
			if (lastTag.startsWith("v"))
				lastTag = lastTag.substring(1);
			int[] baseInts = toIntArray(baseVersion.split("\\."));
			int[] tagInts = toIntArray(lastTag.split("\\."));
			int[] lastVersion;
			if (baseInts[0] > tagInts[0] || baseInts[1] > tagInts[1] || baseInts[2] > tagInts[2])
				lastVersion = baseInts;
			else
				lastVersion = tagInts;
			return """${lastVersion[0]}.${lastVersion[1]}.${lastVersion[2] + 1}""";
		} catch (IllegalStateException e) {
			return baseVersion;
		}
	}
	
	static def getTag(Project project) {
		String tag = "git describe --tags --abbrev=0".execute(null, project.projectDir).text;
		if (tag.isEmpty())
			throw new IllegalStateException("No tag present.");
		return tag;
	}
	
	static def toIntArray(String[] strArr) {
		int[] intArr = new int[strArr.length];
		for (int i = 0; i < strArr.length; i++)
			intArr[i] = strArr[i] as Integer;
		return intArr;
	}
}

archivesBaseName = project.archives_base_name
SemverTask.baseVersion = project.mod_version
version = SemverTask.calculateVersion(project)
group = project.maven_group

tasks.register('semver', SemverTask) {
	group = "build"
	description = "Outputs a tag value for GitHub Actions."
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	
	// Test framework
	testImplementation(platform('org.junit:junit-bom:5.7.0'))
	testImplementation('org.junit.jupiter:junit-jupiter')
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		 it.options.release = targetVersion
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

test {
	useJUnitPlatform()
	
	include 'src/test/java/**'
	testLogging {
		events "passed", "skipped", "failed"
	}
}

jar {
	from("LICENSE.md") {
		rename { "LICENSE_${project.archivesBaseName}"}
	}
}
